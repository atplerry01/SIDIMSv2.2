(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.cardengrjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            
            this.getIncomingPersos = getIncomingPersos;
            this.getIncomingPrints = getIncomingPrints;
            this.getResumableNewPersos = getResumableNewPersos;
            this.getResumablePendingPersos = getResumablePendingPersos;
            this.getResumablePartialPersos = getResumablePartialPersos;

            this.getCardIssuanceLogs = getCardIssuanceLogs;

            this.getJobSplitCEAnalysis = getJobSplitCEAnalysis;
            this.getCECardDelivery = getCECardDelivery;

        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }


        function getIncomingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'createdOn desc';

            return EntityQuery.from('CardEngrIncomingPersos')
                .select('id, jobId, createdOn, jobStatusId')
                .orderBy(orderBy)
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingPrints(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrIncomingPrints')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResumableNewPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrResumeNewPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResumablePendingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrResumePendingPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResumablePartialPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrResumePartialPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceLogs(jobId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceLogs')
                .select('id, cardIssuanceId, collectorId, issuanceId, issuanceTypeId, quantityIssued, quantityRemain, totalQuantity, issuedDate')
                .toType('CardIssuanceLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Issuance Log Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getJobSplitCEAnalysis(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysis')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, heldReturned, wasteReturned, createdById, createdOn, modifiedById, modifiedOn')
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCECardDelivery(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CECardDelivery')
                .select('id, jobTrackerId, departmentId, targetDepartmentId, totalQuantity, totalHeld, totalWaste, deliveredById, deliveredOn, confirmedById, confirmedOn')
                .toType('CardDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
          
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.cardopslookup';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        
        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getCardTypeById = getCardTypeById;
            this.getClientById = getClientById;
            this.getProducts = getProducts;
            this.getVariantById = getVariantById;
            this.getRemarkById = getRemarkById;

            this.getCardTypes = getCardTypes;
            this.getClients = getClients;
            this.getVariants = getVariants;
            this.getRemarks = getRemarks;

            this.getProductWithPredicate = getProductWithPredicate;

            this.getDictionaryClientNames = getDictionaryClientNames;
            this.getDictionaryServiceTypes = getDictionaryServiceTypes;

        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getCardTypeById(id, forceRemote) {
            return this._getById(entityNames.sidCardType, id, forceRemote);
        }

        function getClientById(id, forceRemote) {
            return this._getById(entityNames.sidClient, id, forceRemote);
        }

        function getVariantById(id, forceRemote) {
            return this._getById(entityNames.sidVariant, id, forceRemote);
        }

        function getRemarkById(id, forceRemote) {
            return this._getById(entityNames.remark, id, forceRemote);
        }



        function getCardTypes(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('SidCardTypes')
                .select('id, name')
                .orderBy(orderBy)
                .toType('SidCardType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [CardTypes Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClients(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy;
            var predicate = null;

            if (nameFilter) {
                predicate = _clientPredicate(nameFilter);
            }

            var take = 20; //size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('SidClients')
                .select('id, sectorId, name, shortCode')
                .orderBy(orderBy)
                .toType('SidClient')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [Client Partials] from remote data source', entity.length, true);
                return getByPage(); //entity;
            }

            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _clientPredicate(nameFilter);
                }

                var newEntities = EntityQuery.from('SidClient')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        function _clientPredicate(filterValue) {
            return breeze.Predicate
                .create('name', 'contains', filterValue)
                .or('sector.name', '==', filterValue);
        }

        function getProducts(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('SidProducts')
                .select('id, sidClientId, sidCardTypeId, name, shortCode')
                .orderBy(orderBy)
                .toType('SidProduct')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [SidProducts Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        //getProductWithPredicate
        function getProductWithPredicate(forceRemote, nameFilter) {
            var self = this;
            var entity;
            var orderBy;
            var predicate = null;

            if (nameFilter) {
                predicate = _productWithPredicate(nameFilter);
            }


            return EntityQuery.from('SidProducts')
                .select('id, sidClientId, sidCardTypeId, name, shortCode')
                .orderBy(orderBy)
                .where(predicate)
                .toType('SidProduct')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [SidProducts Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function _productWithPredicate(filterValue) {
            return breeze.Predicate
                .create('sidClient.name', 'contains', filterValue);
        }


        function getVariants(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('SidVariants')
                .select('id, sidClientId, sidCardTypeId, variantName, shortCode')
                .orderBy(orderBy)
                .toType('SidVariant')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [Variant Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRemarks(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('Remarks')
                .select('id, name')
                .orderBy(orderBy)
                .toType('Remark')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                self.log('Retrieved [Remarks Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getDictionaryClientNames(clientId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DictionaryClientNames')
                .select('id, sidClientId, clientCodeName')
                .withParameters({ clientId: clientId })
                .orderBy(orderBy)
                .toType('DictionaryClientName')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DictionaryClientName Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDictionaryServiceTypes(clientId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DictionaryServiceTypes')
                .select('id, sidClientId, sidCardTypeId, serviceTypeId, serviceCodeName')
                .withParameters({ clientId: clientId })
                .orderBy(orderBy)
                .toType('DictionaryServiceType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DictionaryClientName Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.customerservice';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        
        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;

            this.getIncomingJobs = getIncomingJobs;
        
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getIncomingJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CSIncomingJobs')
                .select('id, sidClientId, deliveryProfileId, description, createdById, transactionDate')
                .toType('DeliveryNote')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.mailingjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            
            this.getMAIncomingPersos = getMAIncomingPersos;
            this.getMAPendingDeliverys = getMAPendingDeliverys;
            this.getMAJobSplits = getMAJobSplits;
            this.getMailingCardDelivery = getMailingCardDelivery;

        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }



        function getMAIncomingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('MAIncomingJobs')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMAPendingDeliverys(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('MAPendingDeliverys')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQCIncomingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCIncomingPersos')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMAJobSplits(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('MAJobSplits')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, createdById, createdOn')
                .toType('JobSplit')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getMailingCardDelivery(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('MailingCardDelivery')
                .select('id, jobTrackerId, departmentId, targetDepartmentId, totalQuantity, totalHeld, totalWaste, deliveredById, deliveredOn, confirmedById, confirmedOn')
                .toType('CardDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.dispatchjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getDeliveryNoteById = getDeliveryNoteById;
            this.getDeliveryProfileById = getDeliveryProfileById;
            this.getJobBatchTrackerById = getJobBatchTrackerById;
            
            this.getIncomingJobs = getIncomingJobs;
            this.getDeliveryNoteLogByNoteId = getDeliveryNoteLogByNoteId;
            this.getDeliveryReports = getDeliveryReports;
            this.getDeliveryProfiles = getDeliveryProfiles;
            this.getJobBatchTrackerByTrackId = getJobBatchTrackerByTrackId;

            this.getClientIncomingJobs = getClientIncomingJobs;
            this.getDispatchDelivery = getDispatchDelivery;
            this.getDispatchDeliveryGenerated = getDispatchDeliveryGenerated;

            this.getAllDispatchDelivery = getAllDispatchDelivery;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getJobBatchTrackerById(id, forceRemote) {
            return this._getById('JobBatchTracker', id, forceRemote);
        }

        function getDeliveryNoteById(id, forceRemote) {
            return this._getById(entityNames.deliveryNote, id, forceRemote);
        }

        function getDeliveryProfileById(id, forceRemote) {
            return this._getById(entityNames.deliveryProfile, id, forceRemote);
        }

        function getClientIncomingJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchIncomingJobs')
                .select('id, sectorId, name')
                .toType('SidClient')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [SidClient Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAllDispatchDelivery(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllDispatchDelivery')
                .select('id, sidClientId, jobTrackerId, rangeFrom, rangeTo')
                .toType('DispatchDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DispatchDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDispatchDelivery(clientId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchDelivery')
                .select('id, sidClientId, jobTrackerId, rangeFrom, rangeTo')
                .withParameters({ clientId: clientId })
                .toType('DispatchDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DispatchDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDispatchDeliveryGenerated(clientId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchDeliveryGenerated')
                .select('id, sidClientId, jobTrackerId, rangeFrom, rangeTo')
                .withParameters({ clientId: clientId })
                .toType('DispatchDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DispatchDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function getIncomingJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //DispatchIncomingJobs
            return EntityQuery.from('DPCardDeliveryLogConfirmations')
                .select('id, jobTrackerId, rangeFrom, rangeTo, isConfirmed')
                .toType('CardDeliveryLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDeliveryProfiles(sidClientId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DeliveryProfileByClientId')
                .select('id, name, sidClientId, address, state, country, contactPerson')
                .withParameters({ sidClientId: sidClientId })
                .toType('DeliveryProfile')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }
     
        function getDeliveryNoteLogByNoteId(noteId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchDeliveryNoteLogs')
                .select('id, jobTracker, deliveryNoteId, dispatchDeliveryId, quantityReceived, quantityDelivered, previousDelivery, ommitted, pending, isPartial')
                .withParameters({ noteId: noteId })
                .toType('DeliveryNoteLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DeliveryNoteLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getDeliveryReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchDeliveryNotes')
                .select('id, sidClientId, deliveryProfileId, createdById, description, transactionDate')
                .toType('DeliveryNote')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [DeliveryNotes Partials] from remote data source', entity.length, true);
                return entity;
            }
        }





        function getIncomingJobs1(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('DispatchIncomingJobs')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        //Todo: tobe removed
        function getJobBatchTrackerByTrackId(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('JobBatchByTrackerId')
                .select('id, jobId, jobTrackerId, cardIssuanceLogId')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('JobBatchTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        
        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getCardEngrStaffs = getCardEngrStaffs;
            this.getInventoryStaffs = getInventoryStaffs;
            this.getMailingStaffs = getMailingStaffs;
            this.getProductionStaffs = getProductionStaffs;

            this.getInventoryUsers = getInventoryUsers;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getInventoryUsers(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('InventoryUsers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved[Inventory Users Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getCardEngrStaffs(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('CardEngrStaffs')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved[AccountCardEngr Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getProductionStaffs(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('ProductionStaffs')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved[ProductionStaffAccount Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getInventoryStaffs(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('InventoryStaffs')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved[AccountInventory Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMailingStaffs(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('MailingStaffs')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved[AccountMailing Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved[Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getCardIssuanceById = getCardIssuanceById;
            this.getCardIssuanceLogById = getCardIssuanceLogById;

            this.getJobs = getJobs;
            this.getIncomingJobs = getIncomingJobs;
            this.getCardIssuances = getCardIssuances;
            this.getCardIssuanceByJobId = getCardIssuanceByJobId;
            this.getCardIssuanceLogs = getCardIssuanceLogs;
            this.getCardIssuanceLogByTrackerId = getCardIssuanceLogByTrackerId;
            this.getAllCardIssuanceLogs = getAllCardIssuanceLogs;
            this.getPartialJobs = getPartialJobs;
            //this.getCardWasteJobs = getCardWasteJobs;
            this.getIncomingHeldCards = getIncomingHeldCards;
            this.getIncomingHeldPrints = getIncomingHeldPrints;
            this.getCESplitAnalysis = getCESplitAnalysis;
            this.getCESplitAnalysisHeldCard = getCESplitAnalysisHeldCard;

            //this.getIncomingCEJobSplitByJobTrackerId = getIncomingCEJobSplitByJobTrackerId;

            this.getApprovedCardWastes = getApprovedCardWastes;
            this.getApprovedPrintWastes = getApprovedPrintWastes;

        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getCardIssuanceById(id, forceRemote) {
            return this._getById('CardIssuance', id, forceRemote);
        }

        function getCardIssuanceLogById(id, forceRemote) {
            return this._getById('CardIssuanceLog', id, forceRemote);
        }

        function getJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('InventoryJobs')
                .select('id, jobName, jobNameId, sidSectorId, sidClientId, serviceTypeId, remark, quantity')
                .toType('Job')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Job Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'createdOn desc';

            return EntityQuery.from('InventoryIncomingJobs')
                .select('id, jobId, jobStatusId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPartialJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('InventoryPartialJobs')
                .select('id, jobId, totalQuantity, totalQuantityIssued, totalQuantityRemain')
                .toType('CardIssuance')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceByJobId(jobId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceByJobId')
                .select('id, jobId, collectorId, issuanceId, totalQuantityIssued, totalQuantityRemain, totalQuantity')
                 .withParameters({ jobId: jobId })
                .toType('CardIssuance')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getCardIssuanceLogs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceLogs')
                .select('id, cardIssuanceId, collectorId, issuanceId, issuanceTypeId, quantityIssued, quantityRemain, totalQuantity')
                .toType('CardIssuanceLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Issuance Log Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getApprovedCardWastes(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ApprovedCardWastes')
                .select('id, jobTrackerId, jobSplitId, quantityBad, wasteErrorSourceId, wasteByUnitId')
                .toType('CardWasteAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getApprovedPrintWastes(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ApprovedPrintWastes')
                .select('id, jobTrackerId, jobSplitId, quantityBad, wasteErrorSourceId, wasteByUnitId')
                .toType('PrintWasteAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingHeldCards(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('IncomingHeldCards')
                .select('id, jobTrackerId, jobSplitCEAnalysisId, jobSplitId, quantityHeld, wasteErrorSourceId, wasteByUnitId, createdOn, createdById')
                .toType('CardHeldAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [CardHeld Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingHeldPrints(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('IncomingHeldPrints')
                .select('id, jobTrackerId, jobSplitPrintCEAnalysisId, jobSplitId, quantityHeld, wasteErrorSourceId, wasteByUnitId, createdOn, createdById')
                .toType('PrintHeldAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [CardHeld Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCESplitAnalysis(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CESplitAnalysisByTrackerId')
                .select('id, jobSplit, jobSplitId, quantityGood, quantityHeld, isHeldCardCollected, quantityBad, isBadCardCollected, createdById, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCESplitAnalysisHeldCard(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CESplitAnalysisHeldCardsByTrackerId')
                .select('id, jobSplit, jobSplitId, quantityGood, quantityHeld, isHeldCardCollected, quantityBad, isBadCardCollected, createdById, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuances(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuances')
                .select('id, jobId, collectorId, issuanceId, issuanceStatusId, totalQuantity, totalQuantityIssued, totalQuantityRemain')
                .toType('CardIssuance')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceLogByTrackerId')
                .select('id, cardIssuanceId, collectorId, issuanceId, issuanceTypeId, quantityIssued, quantityRemain, totalQuantity, issuedDate')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('CardIssuanceLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Issuance Log Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAllCardIssuanceLogs(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceLogByJobTrackerId')
                .select('id, cardIssuanceId, collectorId, issuanceId, issuanceTypeId, quantityIssued, quantityRemain, totalQuantity')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('CardIssuanceLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Issuance Log Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        



    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventory';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryInventoryResource]);

    function RepositoryInventoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getProductById = getProductById;
            this.getJobs = getJobs;
            this.getSCMCardRequestById = getSCMCardRequestById;
            this.getCardReceiptById = getCardReceiptById;

            //this.getEmbedCardRequests = getEmbedCardRequests;
            this.getEmbedCardRequestByProducts = getEmbedCardRequestByProducts;
            this.getEmbedCardReceipts = getEmbedCardReceipts;

            this.getClients = getClients;

            this.getClientProducts = getClientProducts;
            this.getProductFilteredCount = getProductFilteredCount;
            this.getProductCount = getProductCount;

            this.getAllClientProducts = getAllClientProducts;

            this.getClientVaultReports = getClientVaultReports;
            this.getClientVaultReportByTrackerId = getClientVaultReportByTrackerId;

            this.getClientStockReports = getClientStockReports;
            this.getClientStockReportByTrackerId = getClientStockReportByTrackerId;
            this.getReceiptLogByRequestId = getReceiptLogByRequestId;

            this.getAllStockReports = getAllStockReports;
            this.getAllIssuanceReports = getAllIssuanceReports;
            this.getAllCardWasteReports = getAllCardWasteReports;
            this.AllDeliveryNotes = AllDeliveryNotes;
            this.AllClientVaultReports = AllClientVaultReports;
            this.AllCardReceiptReports = AllCardReceiptReports;

            this.getAllCardIssuances = getAllCardIssuances;
            this.getClientStockLogByStockReportId = getClientStockLogByStockReportId;
            this.getClientReturnLogs = getClientReturnLogs;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getProductById(id, forceRemote) {
            return this._getById('SidProduct', id, forceRemote);
        }

        function getSCMCardRequestById(id, forceRemote) {
            return this._getById(entityNames.cardrequest, id, forceRemote);
        }

        function getCardReceiptById(id, forceRemote) {
            return this._getById(entityNames.cardreceipt, id, forceRemote);
        }

        function getJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('InventoryJobs')
                .select('id, jobName, jobNameId, sidSectorId, sidClientId, serviceTypeId, remark, quantity')
                .toType('Job')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Job Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getEmbedCardRequestByProducts(sidProductId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('EmbedCardRequestByProducts')
                .select('id, orderNumber, sidProductId, totalBatchQty, totalDelivered, createdById')
                .withParameters({ sidProductId: sidProductId })
                .toType(entityNames.cardrequest)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [EmbedCardRequests Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getEmbedCardReceipts(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('EmbedCardReceipts')
                .select('id, embedCardRequestId, lotNumber, quantity, timeOfReceipt, supplierName, sIDReceiverId, remark')
                .toType(entityNames.cardreceipt)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [EmbedCardReceipt Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getInwardGoods(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('InventoryIncomingJobs')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStockReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('InventoryIncomingJobs')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        


        //
        function getClients(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('SidClients')
                .select('id, sectorId, name, shortCode')
                .toType('SidClient')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Client Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientProducts(clientId, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity = [];
            var orderBy;

            var take = size || 10;
            var skip = page ? (page - 1) * size : 0;

            console.log(self._areItemsLoaded());

            if (self._areItemsLoaded() && !forceRemote) {
                console.log(self._areItemsLoaded());
                // Get the page of attendees from local cache
                return self.$q.when(getByPage());
            }

            return EntityQuery.from('ClientProducts')
                .select('id, sidClientId, sidCardTypeId, name')
                .withParameters({ clientId: clientId })
                .toType('SidProduct')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Product Partials] from remote data source', data.results.length, true);
                return getByPage();
            }


            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _fullNamePredicate(nameFilter);
                }

                var sidProducts = EntityQuery.from('SidProduct')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                console.log(sidProducts);
                return sidProducts;
            }

        }

        function getProductFilteredCount(nameFilter) {
            var self = this;
            var predicate = _fullNamePredicate(nameFilter);

            var sidProducts = EntityQuery.from('SidProduct')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return sidProducts.length;
        }

        function getProductCount() {
            var self = this;
            if (self._areItemsLoaded()) {
                return self.$q.when(self._getLocalEntityCount('SidProduct'));
            }
            // Attendees aren't loaded; ask the server for a count.
            return EntityQuery.from('SidProduct').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function getAllClientProducts(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllClientProducts')
                .select('id, sidClientId, sidCardTypeId, name')
                .toType('SidProduct')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Product Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientVaultReports(sidProductId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientVaultReports')
                .select('id, sidProductId, openingStock, closingStock, modifiedOn')
                .withParameters({ sidProductId: sidProductId })
                .toType('ClientVaultReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Product Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientVaultReportByTrackerId(trackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientVaultReportByTrackerId')
                .select('id, sidProductId, openingStock, closingStock, modifiedOn')
                .withParameters({ trackerId: trackerId })
                .toType('ClientVaultReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Product Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientStockReports(sidProductId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientStockReports')
                .select('id, sidProductId, qtyIssued, wasteQty, returnQty, openingStock, closingStock, createdOn, clientVaultReportId, fileName')
                .withParameters({ sidProductId: sidProductId })
                .toType('ClientStockReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [StockReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientStockLogByStockReportId(stockReportId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientStockLogByStockReportId')
                .select('id, clientStockReportId, cardIssuanceId, issuanceQty, openingStock, closingStock')
                .withParameters({ stockReportId: stockReportId })
                .toType('ClientStockLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [ClientStockLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getClientReturnLogs(sidProductId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientReturnLogByProductId')
                .select('id, clientStockReportId, issuanceQty, openingStock, closingStock')
                .withParameters({ sidProductId: sidProductId })
                .toType('ClientReturnLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [ClientReturnLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getClientStockReportByTrackerId(trackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ClientStockReportByTrackerId')
                .select('id, sidProductId')
                .withParameters({ trackerId: trackerId })
                .toType('ClientStockReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [StockReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function _fullNamePredicate(filterValue) {
            return Predicate
                .create('name', 'contains', filterValue)
                .or('name', 'contains', filterValue);
        }

        // By ID
        function getReceiptLogByRequestId(requestId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('EmbedCardReceiptLogs')
                .select('id, embedCardRequestId, lotNumber, quantity, sIDReceiverId, supplierName, timeOfReceipt, vendorId')
                .withParameters({ requestId: requestId })
                .orderBy(orderBy)
                .toType(entityNames.embedCardReceipt)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                console.log(data);
                entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                //self.log('Retrieved [EmbedCardReceiptLogs Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        // MIS Reports
        function getAllCardIssuances(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllCardIssuances')
                .select('id, jobId, totalQuantity, totalQuantityIssued, totalQuantityRemain, totalWaste, totalHeld')
                .toType('CardIssuance')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAllStockReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('StockReports')
                .select('id, sidProductId, clientVaultReportId, fileName, qtyIssued, wasteQty, returnQty, openingStock, closingStock, createdOn')
                .toType('ClientStockReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [StockReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAllIssuanceReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllCardIssuances')
                .select('id, jobId, jobTrackerId, totalQuantity, totalQuantityIssued, totalQuantityRemain, totalWaste, totalHeld, issuanceId, collectorId')
                .toType('CardIssuance')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [StockReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAllCardWasteReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllCardWasteAnalysis')
                .select('id, jobTrackerId, jobSplitId, jobSplitCEAnalysisId, quantityBad, wasteErrorSourceId, wasteByUnitId, isCardCollected, createdById, createdOn')
                .toType('CardWasteAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardWasteAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function AllDeliveryNotes(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllDeliveryNotes')
                .select('id, sidClientId, deliveryProfileId, description, createdById, transactionDate, auditStatus, customerServiceStatus')
                .toType('DeliveryNote')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [DeliveryNote Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function AllClientVaultReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllClientVaultReports')
                .select('id, sidProductId, openingStock, closingStock, modifiedOn')
                .toType('ClientVaultReport')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [ClientVaultReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function AllCardReceiptReports(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('AllCardReceiptReports')
                .select('id, sidProductId, embedCardRequestId, clientVaultReportId, vendorId, sIDReceiverId, supplierName, lotNumber, quantity, timeOfReceipt')
                .toType('EmbedCardReceipt')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [ClientVaultReport Partials] from remote data source', entity.length, true);
                return entity;
            }
        }
        



    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.materialaudit';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', materialaudit]);

    function materialaudit($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
         
            this.getIncomingJobs = getIncomingJobs;
            this.getDrivers = getDrivers;

        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getIncomingJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //DispatchIncomingJobs
            return EntityQuery.from('MAudIncomingJobs')
                .select('id, sidClientId, deliveryProfileId, description, createdById, transactionDate')
                .toType('DeliveryNote')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self.log('Retrieved [DeliveryNote Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDrivers(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //DispatchIncomingJobs
            return EntityQuery.from('Drivers')
                .select('id, firstName, lastName')
                .toType('ApplicationUser')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self.log('Retrieved [Driver Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.printingjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getPrintSplitQCAnalysisById = getPrintSplitQCAnalysisById;

            this.getIncomingPrints = getIncomingPrints;
            this.getPrintAnalysis = getPrintAnalysis;
            this.getJobSplitPrintCEAnalysisReport = getJobSplitPrintCEAnalysisReport;
            this.getJobSplitPrintCEAnalysis = getJobSplitPrintCEAnalysis;
            this.getPrintDeliverables = getPrintDeliverables;
            this.getPrintCardDelivery = getPrintCardDelivery;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getPrintSplitQCAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitPrintQCAnalysis, id, forceRemote);
        }

        function getIncomingPrints(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('IncomingPrints')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintAnalysis(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('PrintAnalysis')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintDeliverables(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('PrintDeliverables')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitPrintCEAnalysisReport(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('JobSplitPrintCEAnalysis')
                .select('id, jobSplit, jobTrackerId, quantityGood, quantityHeld, quantityBad, wasteReturned, heldReturned')
                .toType('JobSplitPrintCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitPrintCEAnalysis(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('JobSplitPrintAnalysisByTrackerId')
                .select('id, jobSplit, quantityGood, quantityHeld, quantityBad')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('JobSplitPrintCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResumableNewPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrResumeNewPersos')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResumablePartialPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardEngrResumePartialPersos')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getCardIssuanceLogs(jobId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('CardIssuanceLogs')
                .select('id, cardIssuanceId, collectorId, issuanceId, issuanceTypeId, quantityIssued, quantityRemain, totalQuantity')
                //.withParameters({ jobId: jobId })
                .toType('CardIssuanceLog')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Issuance Log Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintCardDelivery(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('PrintCardDelivery')
                .select('id, jobTrackerId, departmentId, targetDepartmentId, totalQuantity, totalHeld, totalWaste, deliveredById, deliveredOn, confirmedById, confirmedOn')
                .toType('CardDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.qacjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            
            this.getQAIncomingPersos = getQAIncomingPersos;
            this.getQAIncomingPrints = getQAIncomingPrints;

            this.getQCIncomingPersos = getQCIncomingPersos;
            this.getQCPendingPersos = getQCPendingPersos;
            this.getQCPendingDelivery = getQCPendingDelivery;
            this.getQCIncomingPrints = getQCIncomingPrints;
            this.getQCCardDeliveryLists = getQCCardDeliveryLists;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getQAIncomingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QAIncomingPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQAIncomingPrints(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QAIncomingPrints')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getQCIncomingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCIncomingPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQCPendingPersos(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCPendingPersos')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQCPendingDelivery(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCPendingDelivery')
                .select('id, jobId, createdOn')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        //getQCCardDeliveryLists
        function getQCCardDeliveryLists(jobTrackerId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCCardDeliveryLists')
                .select('id, jobTrackerId, rangeFrom, rangeTo')
                .withParameters({ jobTrackerId: jobTrackerId })
                .toType('CardDelivery')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [CardDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQCIncomingPrints(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('QCIncomingPrints')
                .select('id, jobId')
                .toType('JobTracker')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                //self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventjob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventproduct';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventtracker';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.inventflag';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getllAccountPatials = getllAccountPatials;
            this.getAdminPatials = getAdminPatials;
            this.getManagementPatials = getManagementPatials;
            this.getAccountantPatials = getAccountantPatials;
            this.getLibrarianPatials = getLibrarianPatials;
            this.getTeacherPatials = getTeacherPatials;
            this.getStudentPatials = getStudentPatials;
            this.getParentPatials = getParentPatials;

            this.getBasicInfoPatials = getBasicInfoPatials;
            this.getRoleInfoPatials = getRoleInfoPatials;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getllAccountPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getManagementPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy = 'firstName'; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Managements')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isManagement = true;
                }
                self._areItemsLoaded(true);
                self.log('Retrieved [Management Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAccountantPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAccountant', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Accountants')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAccountant = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Accountant Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getLibrarianPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Librarians')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isLibrarian = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Librarian Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getTeacherPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isTeacher', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Teachers')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isTeacher = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Teacher Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getStudentPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Students')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isStudent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Student Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getParentPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isParent', '==', true);
            var entity = [];
            var orderBy; //sortOrder;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Parents')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isParent = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Parents Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.resourcejob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResourceJob]);

    function RepositoryResourceJob($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getJobById = getJobById;
            this.getJobTrackerById = getJobTrackerById;
            this.getJobBatchTrackerById = getJobBatchTrackerById;
            this.getDeliveryNoteId = getDeliveryNoteId;

            this.getJobBatchTrackerByTrackerId = getJobBatchTrackerByTrackerId;
            this.getCardIssuanceById = getCardIssuanceById;
            this.getCardIssuanceLogById = getCardIssuanceLogById;
            this.getJobSplitCEAnalysisById = getJobSplitCEAnalysisById;
            this.getJobSplitPrintCEAnalysisById = getJobSplitPrintCEAnalysisById;
            this.getJobSplitQCAnalysisById = getJobSplitQCAnalysisById;
            this.getCardWasteAnalysisById = getCardWasteAnalysisById;
            this.getPrintWasteAnalysisById = getPrintWasteAnalysisById;

            this.getServerJobQueues = getServerJobQueues;
            this.getServerJobQueues2 = getServerJobQueues2;
            this.getRecentServerJobQueues = getRecentServerJobQueues;
            this.getRecentServerJobQueues2 = getRecentServerJobQueues2;
            this.getServerJobCount = getServerJobCount;
            this.getServerJobFilteredCount = getServerJobFilteredCount;

            this.getJobTrackers = getJobTrackers;
            this.getJobTrackerCount = getJobTrackerCount;
            this.getJobTrackerFilteredCount = getJobTrackerFilteredCount;

            this.getJobs = getJobs;
            this.getNonPersoJobs = getNonPersoJobs;
            this.getJobCount = getJobCount;
            this.getJobFilteredCount = getJobFilteredCount;

            this.getJobSplits = getJobSplits;


            this.getByServerJobQueueId = getByServerJobQueueId;
            this.getByNonPersoJobId = getByNonPersoJobId;

            this.getJobTrackerByCEAnalysisId = getJobTrackerByCEAnalysisId;
            this.getJobTrackerByJobId = getJobTrackerByJobId;
            this.getJobVariantByJobId = getJobVariantByJobId;
            this.getIncompleteJobs = getIncompleteJobs;

            this.getJobSplitCEAnalysis = getJobSplitCEAnalysis;
            this.getJobSplitCEAnalysisByDepartment = getJobSplitCEAnalysisByDepartment;

            this.getJobSplitByJobTrackerId = getJobSplitByJobTrackerId;
            this.getPersoJobSplitByJobTrackerId = getPersoJobSplitByJobTrackerId;
            this.getPrintJobSplitByJobTrackerId = getPrintJobSplitByJobTrackerId;
            this.getMailingJobSplitByJobTrackerId = getMailingJobSplitByJobTrackerId;
            this.getJobSplitCEAnalysisByJobTrackerId = getJobSplitCEAnalysisByJobTrackerId;
            this.getJobSplitQCAnalysisByJobTrackerId = getJobSplitQCAnalysisByJobTrackerId;
            this.getIncomingCESplitAnalysisByJobTrackerId = getIncomingCESplitAnalysisByJobTrackerId;
            this.getIncomingQCSplitAnalysisByJobTrackerId = getIncomingQCSplitAnalysisByJobTrackerId;
            this.getIncomingPrintCESplitAnalysisByJobTrackerId = getIncomingPrintCESplitAnalysisByJobTrackerId;

            this.getJobTrackerByPrintCEAnalysisId = getJobTrackerByPrintCEAnalysisId;
            this.geJobSplitAnalysisByTrackerId = geJobSplitAnalysisByTrackerId;

            this.getCardOpsByJobId = getCardOpsByJobId;
            this.getJobByTrackerId = getJobByTrackerId;

            this.getQABySplitId = getQABySplitId;
            this.getQAWasteRequests = getQAWasteRequests;
            this.getPendingWasteRequests = getPendingWasteRequests;
            this.getIssuedWasteRequests = getIssuedWasteRequests;

            this.getPrintQAWasteRequests = getPrintQAWasteRequests;

            this.getCECardDeliverys = getCECardDeliverys;
            this.getCECardDeliveryLogs = getCECardDeliveryLogs;

            this.getCECardDeliveryLogByTrackerId = getCECardDeliveryLogByTrackerId;
            this.getPrQCCardDeliveryLogByTrackerId = getPrQCCardDeliveryLogByTrackerId;
            this.getQCCardDeliveryLogByTrackerId = getQCCardDeliveryLogByTrackerId;
            this.getMACardDeliveryLogByTrackerId = getMACardDeliveryLogByTrackerId;
            this.getDPCardDeliveryLogByClientId = getDPCardDeliveryLogByClientId;

            this.getCardIssuanceByTrackerId = getCardIssuanceByTrackerId;
            this.getCardIssuanceLogByTrackerId = getCardIssuanceLogByTrackerId;
            this.getPrintAnalysisByTrackerId = getPrintAnalysisByTrackerId;
            this.getDispatchJobTracker = getDispatchJobTracker;

            this.getJobSplitByTrackerId = getJobSplitByTrackerId;

            this.getFlaggedJobs = getFlaggedJobs;
            this.getResolvedFlaggedJobs = getResolvedFlaggedJobs;
            this.getUnitFlaggedJobs = getUnitFlaggedJobs;

            this.getCEJobSplits = getCEJobSplits;
            this.getJobHandler = getJobHandler;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getJobById(id, forceRemote) {
            return this._getById(entityNames.job, id, forceRemote);
        }

        function getJobTrackerById(id, forceRemote) {
            return this._getById(entityNames.jobTracker, id, forceRemote);
        }

        function getJobBatchTrackerById(id, forceRemote) {
            return this._getById(entityNames.jobBatchTracker, id, forceRemote);
        }

        function getByServerJobQueueId(id, forceRemote) {
            return this._getById(entityNames.serverJobQueue, id, forceRemote);
        }

        //getByNonPersoJobId
        function getByNonPersoJobId(id, forceRemote) {
            return this._getById('NonPersoJob', id, forceRemote);
        }

        //getDispatchDeliveryById
        function getDeliveryNoteId(id, forceRemote) {
            return this._getById('DeliveryNote', id, forceRemote);
        }



        // Issuance
        function getCardIssuanceById(id, forceRemote) {
            return this._getById(entityNames.cardIssuance, id, forceRemote);
        }

        function getCardIssuanceLogById(id, forceRemote) {
            return this._getById(entityNames.cardIssuanceLog, id, forceRemote);
        }

        function getJobSplitCEAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitCEAnalysis, id, forceRemote);
        }

        function getJobSplitPrintCEAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitPrintCEAnalysis, id, forceRemote);
        }

        function getJobSplitQCAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitQCAnalysis, id, forceRemote);
        }

        function getCardWasteAnalysisById(id, forceRemote) {
            return this._getById(entityNames.cardWasteAnalysis, id, forceRemote);
        }

        function getPrintWasteAnalysisById(id, forceRemote) {
            return this._getById(entityNames.printWasteAnalysis, id, forceRemote);
        }



        // ServerJobs
        function getRecentServerJobQueues(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            //if (nameFilter) {
            //    predicate = _recentServerJobPredicate(nameFilter);
            //}

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            //var take = size || 20;
            var take = 50;
            var skip = page ? (page - 1) * size : 0;

            //if (self._areItemsLoaded() && !forceRemote) {
            //    return self.$q.when(getByPage());
            //}

            return EntityQuery.from('RecentServerJobQueues')
                .select('id, jobName, createdOn')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                //if (nameFilter) {
                //    predicate = _recentServerJobPredicate(nameFilter);
                //}

                if (extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                    if (nameFilter && extension === 'asc') {
                        predicate = _serverJobPredicateJobFile(nameFilter);
                    }
                } else if (extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                    if (nameFilter && extension === 'xls') {
                        predicate = _serverJobPredicateSorting(nameFilter);
                    }
                } else {
                    predicate = _serverJobPredicate(nameFilter);
                    if (nameFilter) {
                        predicate = _serverJobPredicate(nameFilter);
                    }
                }


                //Todo
                var newEntities = EntityQuery.from('RecentServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        function getRecentServerJobQueues2(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            //if (nameFilter) {
            //    predicate = _recentServerJobPredicate(nameFilter);
            //}

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            //var take = size || 20;
            var take = 50;
            var skip = page ? (page - 1) * size : 0;

            //if (self._areItemsLoaded() && !forceRemote) {
            //    return self.$q.when(getByPage());
            //}

            return EntityQuery.from('RecentServerJobQueues')
                .select('id, jobName, createdOn')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }

        }

        function getRecentServerJobCount() {
            var self = this;
            return EntityQuery.from('ServerJobQueues').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function getRecentServerJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _serverJobPredicate(nameFilter);

            var entities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }


        // ServerJobs
        function getServerJobQueues(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            var take = size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('ServerJobQueues')
                .select('id, jobName, createdOn')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                if (extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                    if (nameFilter && extension === 'asc') {
                        predicate = _serverJobPredicateJobFile(nameFilter);
                    }
                } else if (extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                    if (nameFilter && extension === 'xls') {
                        predicate = _serverJobPredicateSorting(nameFilter);
                    }
                } else {
                    predicate = _serverJobPredicate(nameFilter);
                    if (nameFilter) {
                        predicate = _serverJobPredicate(nameFilter);
                    }
                }

                var newEntities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        function getServerJobQueues2(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            var take = size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('ServerJobQueues')
                .select('id, jobName, createdOn')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return getByPage(); //entity;
            }
        }


        function getServerJobCount() {
            var self = this;
            return EntityQuery.from('ServerJobQueues').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function getServerJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _serverJobPredicate(nameFilter);

            var entities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }

        // All serverJobs
        function _serverJobPredicate(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('isTreated', '==', false);
        }

        //_serverJobPredicateJobFile
        function _serverJobPredicateJobFile(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', 'asc')
                .or('jobName', 'contains', 'pgp')
                .and('isTreated', '==', false);
        }

        //_serverJobPredicateSorting
        function _serverJobPredicateSorting(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', '.xls')
                .and('isTreated', '==', false);
        }

        function _recentServerJobPredicate(filterValue) {
            var d = new Date();
            d.setHours(d.getHours() - 2);

            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', 'asc')
                .or('jobName', 'contains', 'pgp')
                .and('isTreated', '==', false)
                .and('createdOn', '>=', d);
        }



        function getJobTrackers(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'modifiedOn desc';
            var predicate = null;

            var take = size || 10;
            var skip = page ? (page - 1) * size : 0;
            var nameFilter = nameFilter || '';

            if (nameFilter) {
                predicate = _jobTrackerPredicate(nameFilter);
            }

            return EntityQuery.from('JobTrackers')
                .select('id, jobId, cardOpsId, inventoryId, printingId, printQAId, printQCId, cardEngrId, qAId, firstJobRunId, cardEngrResumeId, qCId, mailingId, dispatchId, mAudId, customerServiceId, tAT, isFlag, createdOn, modifiedOn, isCompleted')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity; getByPage();
            }

            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _jobTrackerPredicate(nameFilter);
                }

                var newEntities = EntityQuery.from('JobTrackers')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }
        }

        function getJobTrackerFilteredCount(nameFilter) {
            var self = this;
            var predicate = _jobTrackerPredicate(nameFilter);

            var entities = EntityQuery.from('JobTrackers')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }

        function getJobTrackerCount() {
            var self = this;
            if (self._areItemsLoaded()) {
                return self.$q.when(self._getLocalEntityCount('JobTracker'));
            }
            // Attendees aren't loaded; ask the server for a count.
            return EntityQuery.from('JobTracker').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function _jobTrackerPredicate(filterValue) {
            return Predicate
                .create('job.jobName', 'contains', filterValue)
                .or('job.jobName', 'contains', filterValue)
                .and('isCompleted', '==', false);
        }


        function getJobSplits(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplits')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo')
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobBatchTrackerByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobBatchTrackerByTrackerId')
                .select('id, jobId, jobTrackerId')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobBatchTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CardIssuanceByTrackerId')
                .select('id, jobTrackerId, totalQuantity, totalQuantityIssued, totalQuantityRemain, totalWaste, totalHeld')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardIssuance)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [cardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            //quantityIssued, quantityRemain, issuanceId, collectorId, issuedDate
            return EntityQuery.from('CardIssuanceLogByTrackerId')
                .select('id, quantityIssued, quantityRemain, issuanceId, collectorId, issuedDate')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardIssuanceLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [cardIssuanceLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        //getPrintAnalysisByTrackerId
        function getPrintAnalysisByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitPrintCEAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitPrintCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [PrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitByTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCECardDeliverys(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEDepCardDeliverys')
                .select('id, jobTrackerId, departmentId, targetDepartmentId')
                .orderBy(orderBy)
                .toType(entityNames.cardDelivery)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCECardDeliveryLogs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEDepCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, createdById, confirmedById, createdOn, isConfirmed')
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function getCECardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CECardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrQCCardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrQCCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed, description')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType("CardDeliveryLog")
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getQCCardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QCCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed, description')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType("CardDeliveryLog")
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMACardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('MACardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, createdById, createdOn, isConfirmed, boxQty')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDPCardDeliveryLogByClientId(clientId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DPCardDeliveryLogs')
                .select('id, jobTrackerId, rangeFrom, rangeTo, isConfirmed, createdById')
                .withParameters({ clientId: clientId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }




        function getJobs(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';

            var nameFilter = nameFilter || '';
            var take = size || 10;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('Jobs')
                .select('id, jobName, sidSectorId, sidClientId, sidCardTypeId, jobStatusId, remark, serviceTypeId, quantity, createdOn')
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                var entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                //self.log('Retrieved [Job Partials] from remote data source', entity.length, true);
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _jobPredicate(nameFilter);
                }

                var sidProducts = EntityQuery.from('Job')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return sidProducts;
            }

        }

        function getNonPersoJobs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('NonPersoJobs')
                .select('id, jobName, description, createdById')
                .orderBy(orderBy)
                .toType('NonPersoJob')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                var entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                //self.log('Retrieved [NonPersoJob Partials] from remote data source', entity.length, true);
                return entity;
            }

        }

        function getJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _jobPredicate(nameFilter);

            var sidProducts = EntityQuery.from('Job')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return sidProducts.length;
        }

        function getJobCount() {
            var self = this;
            if (self._areItemsLoaded()) {
                return self.$q.when(self._getLocalEntityCount(entityNames.job));
            }
            // Attendees aren't loaded; ask the server for a count.
            return EntityQuery.from('Jobs').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function _jobPredicate(filterValue) {
            return Predicate
                .create('jobName', 'contains', filterValue)
                .or('jobName', 'contains', filterValue);
        }





        function getJobByTrackerId(val, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobByTrackerId')
                .select('id, jobName, sidSectorId, sidClientId, sidCardTypeId, remark, serviceTypeId, quantity')
                .withParameters({ jobTrackerId: val })
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [Job Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobHandler(jobSplitId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobHandlers')
                .select('id, jobSplitId, handlerId, createdOn, modifiedOn')
                .withParameters({ jobSplitId: jobSplitId })
                .orderBy(orderBy)
                .toType('JobHandler')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }
        }

        function getDispatchJobTracker(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DispatchJobTracker')
                .select('id, jobId')
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCEJobSplits(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEJobSplits')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPersoJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PersoJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrintJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMailingJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('MailingJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted, isMACompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysis(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysis')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysisByDepartment(department, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysisByDepartment')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, modifiedById')
                .withParameters({ department: department })
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, modifiedOn, modifiedById')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitQCAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitQCAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType('JobSplitQCAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitQCAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingCESplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingCEJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn, heldReturned, wasteReturned, isJobHandleByCE, isJobHandleByQC')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingPrintCESplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingPrintCEJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn, heldReturned, wasteReturned')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitPrintCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitPrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingQCSplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingQCJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitQCAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitQCAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByJobId')
                .select('id, jobId, cardOpsId, inventoryId, printingId, cardEngrId, qAId, firstJobRunId, cardEngrResumeId, qCId, mailingId, dispatchId, customerServiceId')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByCEAnalysisId(jobCEAnalysisId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByCEAnalysisId')
                .select('id, jobId')
                .withParameters({ jobCEAnalysisId: jobCEAnalysisId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByPrintCEAnalysisId(jobCEAnalysisId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByCEAnalysisId')
                .select('id, jobId')
                .withParameters({ jobCEAnalysisId: jobCEAnalysisId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getJobVariantByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobVariantByJobId')
                .select('id, jobId, sidProductId, sidVariantId')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType('JobVariant')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobVariantByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncompleteJobs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncompleteJobs')
                .select('id, jobName, sidSectorId, sidClientId, remark, serviceTypeId, quantity, jobStatusId')
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [IncompleteJob Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQABySplitId(splitId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QABySplitId')
                .select('id, jobTrackerId, jobSplitId')
                .withParameters({ splitId: splitId })
                .orderBy(orderBy)
                .toType('Sid05QA')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getQAWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QAWasteRequests')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, createdById')
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPendingWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PendingWasteRequests')
                .select('id, jobSplitId')
                .orderBy(orderBy)
                .toType('JobBadCardApproval')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobBadCardApproval Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIssuedWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IssuedWasteRequests')
                .select('id, jobSplitId')
                .orderBy(orderBy)
                .toType('JobBadCardApproval')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobBadCardApproval Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        //Print Section
        function geJobSplitAnalysisByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitPrintAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintQAWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrintQAWasteRequests')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, createdById')
                .orderBy(orderBy)
                .toType('JobSplitPrintCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitPrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        //Unit Activities
        function getCardOpsByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CardOpsByJobId')
                .select('id, timeIn, timeOut')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType('Sid01CardOps')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardOps Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function _jobNamePredicate(filterValue) {
            console.log(filterValue);
            return Predicate
                .create('jobName', 'contains', filterValue)
                .or('jobName', 'contains', filterValue);
        }

        function _fullNamePredicate(filterValue) {
            return Predicate
                .create('jobId', 'contains', filterValue)
                .or('cardOpsId', 'contains', filterValue);
        }


        function getUnitFlaggedJobs(unitName, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('UnitFlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .withParameters({ unitName: unitName })
                .orderBy(orderBy)
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardOps Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('FlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResolvedFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ResolvedFlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.resourcejob';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResourceJob]);

    function RepositoryResourceJob($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
            this.getJobById = getJobById;
            this.getJobTrackerById = getJobTrackerById;
            this.getJobBatchTrackerById = getJobBatchTrackerById;
            this.getDeliveryNoteId = getDeliveryNoteId;

            this.getJobBatchTrackerByTrackerId = getJobBatchTrackerByTrackerId;
            this.getCardIssuanceById = getCardIssuanceById;
            this.getCardIssuanceLogById = getCardIssuanceLogById;
            this.getJobSplitCEAnalysisById = getJobSplitCEAnalysisById;
            this.getJobSplitPrintCEAnalysisById = getJobSplitPrintCEAnalysisById;
            this.getJobSplitQCAnalysisById = getJobSplitQCAnalysisById;
            this.getCardWasteAnalysisById = getCardWasteAnalysisById;
            this.getPrintWasteAnalysisById = getPrintWasteAnalysisById;

            this.getServerJobQueues = getServerJobQueues;
            this.getServerJobQueues2 = getServerJobQueues2;
            this.getDeletedServerJobQueues = getDeletedServerJobQueues;
            this.getRecentServerJobQueues = getRecentServerJobQueues;
            this.getRecentServerJobQueues2 = getRecentServerJobQueues2;

            this.getServerJobCount = getServerJobCount;
            this.getServerJobFilteredCount = getServerJobFilteredCount;

            this.getJobTrackers = getJobTrackers;
            this.getAllJobTrackers = getAllJobTrackers;
            this.getJobTrackerCount = getJobTrackerCount;
            this.getJobTrackerFilteredCount = getJobTrackerFilteredCount;

            this.getJobs = getJobs;
            this.getNonPersoJobs = getNonPersoJobs;
            this.getJobCount = getJobCount;
            this.getJobFilteredCount = getJobFilteredCount;

            this.getJobSplits = getJobSplits;


            this.getByServerJobQueueId = getByServerJobQueueId;
            this.getByNonPersoJobId = getByNonPersoJobId;

            this.getJobTrackerByCEAnalysisId = getJobTrackerByCEAnalysisId;
            this.getJobTrackerByJobId = getJobTrackerByJobId;
            this.getJobVariantByJobId = getJobVariantByJobId;
            this.getIncompleteJobs = getIncompleteJobs;

            this.getJobSplitCEAnalysis = getJobSplitCEAnalysis;
            this.getJobSplitCEAnalysisByDepartment = getJobSplitCEAnalysisByDepartment;

            this.getJobSplitByJobTrackerId = getJobSplitByJobTrackerId;
            this.getPersoJobSplitByJobTrackerId = getPersoJobSplitByJobTrackerId;
            this.getPrintJobSplitByJobTrackerId = getPrintJobSplitByJobTrackerId;
            this.getMailingJobSplitByJobTrackerId = getMailingJobSplitByJobTrackerId;
            this.getPendingCESplitAnalysisByJobTrackerId = getPendingCESplitAnalysisByJobTrackerId;
            this.getJobSplitCEAnalysisByJobTrackerId = getJobSplitCEAnalysisByJobTrackerId;
            this.getJobSplitQCAnalysisByJobTrackerId = getJobSplitQCAnalysisByJobTrackerId;
            this.getIncomingCESplitAnalysisByJobTrackerId = getIncomingCESplitAnalysisByJobTrackerId;
            this.getIncomingQCSplitAnalysisByJobTrackerId = getIncomingQCSplitAnalysisByJobTrackerId;
            this.getIncomingPrintCESplitAnalysisByJobTrackerId = getIncomingPrintCESplitAnalysisByJobTrackerId;

            this.getJobTrackerByPrintCEAnalysisId = getJobTrackerByPrintCEAnalysisId;
            this.geJobSplitAnalysisByTrackerId = geJobSplitAnalysisByTrackerId;

            this.getCardOpsByJobId = getCardOpsByJobId;
            this.getJobByTrackerId = getJobByTrackerId;

            this.getQABySplitId = getQABySplitId;
            this.getQAWasteRequests = getQAWasteRequests;
            this.getPendingWasteRequests = getPendingWasteRequests;
            this.getIssuedWasteRequests = getIssuedWasteRequests;

            this.getPrintQAWasteRequests = getPrintQAWasteRequests;

            this.getCECardDeliverys = getCECardDeliverys;
            this.getCECardDeliveryLogs = getCECardDeliveryLogs;

            this.getCECardDeliveryLogByTrackerId = getCECardDeliveryLogByTrackerId;
            this.getPrQCCardDeliveryLogByTrackerId = getPrQCCardDeliveryLogByTrackerId;
            this.getQCCardDeliveryLogByTrackerId = getQCCardDeliveryLogByTrackerId;
            this.getMACardDeliveryLogByTrackerId = getMACardDeliveryLogByTrackerId;
            this.getDPCardDeliveryLogByClientId = getDPCardDeliveryLogByClientId;

            this.getCardIssuanceByTrackerId = getCardIssuanceByTrackerId;
            this.getCardIssuanceLogByTrackerId = getCardIssuanceLogByTrackerId;
            this.getPrintAnalysisByTrackerId = getPrintAnalysisByTrackerId;
            this.getDispatchJobTracker = getDispatchJobTracker;

            this.getJobSplitByTrackerId = getJobSplitByTrackerId;

            this.getFlaggedJobs = getFlaggedJobs;
            this.getResolvedFlaggedJobs = getResolvedFlaggedJobs;
            this.getUnitFlaggedJobs = getUnitFlaggedJobs;

            this.getCEJobSplits = getCEJobSplits;
            this.getJobHandler = getJobHandler;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getJobById(id, forceRemote) {
            return this._getById(entityNames.job, id, forceRemote);
        }

        function getJobTrackerById(id, forceRemote) {
            return this._getById(entityNames.jobTracker, id, forceRemote);
        }

        function getJobBatchTrackerById(id, forceRemote) {
            return this._getById(entityNames.jobBatchTracker, id, forceRemote);
        }

        function getByServerJobQueueId(id, forceRemote) {
            return this._getById(entityNames.serverJobQueue, id, forceRemote);
        }

        //getByNonPersoJobId
        function getByNonPersoJobId(id, forceRemote) {
            return this._getById('NonPersoJob', id, forceRemote);
        }

        //getDispatchDeliveryById
        function getDeliveryNoteId(id, forceRemote) {
            return this._getById('DeliveryNote', id, forceRemote);
        }



        // Issuance
        function getCardIssuanceById(id, forceRemote) {
            return this._getById(entityNames.cardIssuance, id, forceRemote);
        }

        function getCardIssuanceLogById(id, forceRemote) {
            return this._getById(entityNames.cardIssuanceLog, id, forceRemote);
        }

        function getJobSplitCEAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitCEAnalysis, id, forceRemote);
        }

        function getJobSplitPrintCEAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitPrintCEAnalysis, id, forceRemote);
        }

        function getJobSplitQCAnalysisById(id, forceRemote) {
            return this._getById(entityNames.jobSplitQCAnalysis, id, forceRemote);
        }

        function getCardWasteAnalysisById(id, forceRemote) {
            return this._getById(entityNames.cardWasteAnalysis, id, forceRemote);
        }

        function getPrintWasteAnalysisById(id, forceRemote) {
            return this._getById(entityNames.printWasteAnalysis, id, forceRemote);
        }



        // ServerJobs
        function getRecentServerJobQueues(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            //if (nameFilter) {
            //    predicate = _recentServerJobPredicate(nameFilter);
            //}

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            //var take = size || 20;
            var take = 50;
            var skip = page ? (page - 1) * size : 0;

            //if (self._areItemsLoaded() && !forceRemote) {
            //    return self.$q.when(getByPage());
            //}

            return EntityQuery.from('RecentServerJobQueues')
                .select('id, jobName, createdOn')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                //if (nameFilter) {
                //    predicate = _recentServerJobPredicate(nameFilter);
                //}

                if (extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                    if (nameFilter && extension === 'asc') {
                        predicate = _serverJobPredicateJobFile(nameFilter);
                    }
                } else if (extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                    if (nameFilter && extension === 'xls') {
                        predicate = _serverJobPredicateSorting(nameFilter);
                    }
                } else {
                    predicate = _serverJobPredicate(nameFilter);
                    if (nameFilter) {
                        predicate = _serverJobPredicate(nameFilter);
                    }
                }


                //Todo
                var newEntities = EntityQuery.from('RecentServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        function getRecentServerJobQueues2(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            //if (nameFilter) {
            //    predicate = _recentServerJobPredicate(nameFilter);
            //}

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            //var take = size || 20;
            var take = 50;
            var skip = page ? (page - 1) * size : 0;

            //if (self._areItemsLoaded() && !forceRemote) {
            //    return self.$q.when(getByPage());
            //}

            return EntityQuery.from('RecentServerJobQueues')
                .select('id, jobName, createdOn, isTreated, isDeleted')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }

        }

        function getRecentServerJobCount() {
            var self = this;
            return EntityQuery.from('ServerJobQueues').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function getRecentServerJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _serverJobPredicate(nameFilter);

            var entities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }


        // ServerJobs
        function getServerJobQueues(extension, forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            var take = size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('ServerJobQueues')
                .select('id, jobName, createdOn, isTreated, isDeleted')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                if (extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                    if (nameFilter && extension === 'asc') {
                        predicate = _serverJobPredicateJobFile(nameFilter);
                    }
                } else if (extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                    if (nameFilter && extension === 'xls') {
                        predicate = _serverJobPredicateSorting(nameFilter);
                    }
                } else {
                    predicate = _serverJobPredicate(nameFilter);
                    if (nameFilter) {
                        predicate = _serverJobPredicate(nameFilter);
                    }
                }

                var newEntities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        function getServerJobQueues2(extension, forceRemote, page, size, nameFilter) {

            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            if (extension === 'asc') {
                predicate = _serverJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _serverJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _serverJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _serverJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _serverJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _serverJobPredicate(nameFilter);
                }
            }

            var take = size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('ServerJobQueues')
                .select('id, jobName, createdOn, isTreated, isDeleted')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                console.log(entity);
                return getByPage(); //entity;
            }

            function getByPage() {
                //var predicate = null;
                var newEntities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }

        // DeletedServerJobs
        function getDeletedServerJobQueues(extension, forceRemote, page, size, nameFilter) {

            var self = this;
            var entity;
            var orderBy = 'createdOn desc';
            var predicate = null;

            if (extension === 'asc') {
                predicate = _deletedServerJobPredicateJobFile(nameFilter);
                if (nameFilter && extension === 'asc') {
                    predicate = _deletedServerJobPredicateJobFile(nameFilter);
                }
            } else if (extension === 'xls') {
                predicate = _deletedServerJobPredicateSorting(nameFilter);
                if (nameFilter && extension === 'xls') {
                    predicate = _deletedServerJobPredicateSorting(nameFilter);
                }
            } else {
                predicate = _deletedServerJobPredicate(nameFilter);
                if (nameFilter) {
                    predicate = _deletedServerJobPredicate(nameFilter);
                }
            }

            var take = size || 20;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('ServerJobQueues')
                .select('id, jobName, createdOn, isTreated, isDeleted')
                .orderBy(orderBy)
                .toType(entityNames.serverJobQueue)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                console.log(entity);
                return getByPage(); //entity;
            }

            function getByPage() {
                //var predicate = null;
                var newEntities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return newEntities;
            }

        }


        function getServerJobCount() {
            var self = this;

            //return EntityQuery.from('ServerJobQueues').take(0).inlineCount()
            //    .using(this.manager).execute()
            //    .then(this._getInlineCount);

            var newEnty = EntityQuery.from('ServerJobQueues').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);

            console.log(newEnty);

            return newEnty
        }

        function getServerJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _serverJobPredicate(nameFilter);

            var entities = EntityQuery.from('ServerJobQueues')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }

        // All serverJobs
        function _serverJobPredicate(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('isTreated', '==', false)
                .and('isDeleted', '==', false);
        }

        //_serverJobPredicateJobFile
        function _serverJobPredicateJobFile(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', 'asc')
                .or('jobName', 'contains', 'pgp')
                .and('isDeleted', '==', false)
                .and('isTreated', '==', false);
        }

        //_serverJobPredicateSorting
        function _serverJobPredicateSorting(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', '.xls')
                .and('isTreated', '==', false)
                .and('isDeleted', '==', false);
        }

        function _recentServerJobPredicate(filterValue) {
            var d = new Date();
            d.setHours(d.getHours() - 2);

            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', 'asc')
                .or('jobName', 'contains', 'pgp')
                .and('isTreated', '==', false)
                .and('isDeleted', '==', false)
                .and('createdOn', '>=', d);
        }








        function _deletedServerJobPredicate(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('isTreated', '==', false)
                .and('isDeleted', '==', true);
        }

        function _deletedServerJobPredicateJobFile(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', 'asc')
                .or('jobName', 'contains', 'pgp')
                .and('isTreated', '==', false)
                .and('isDeleted', '==', true);
        }

        function _deletedServerJobPredicateSorting(filterValue) {
            return breeze.Predicate
                .create('jobName', 'contains', filterValue)
                .and('jobName', 'contains', '.xls')
                .and('isTreated', '==', false)
                .and('isDeleted', '==', true);
        }





        function getAllJobTrackers(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'modifiedOn desc';
            var predicate = null;
            predicate = _jobTrackerDefaultPredicate(nameFilter);

            return EntityQuery.from('JobTrackers')
                .select('id, jobId, cardOpsId, inventoryId, printingId, printQAId, printQCId, cardEngrId, qAId, firstJobRunId, cardEngrResumeId, qCId, mailingId, dispatchId, mAudId, customerServiceId, tAT, isFlag, createdOn, modifiedOn, isCompleted')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }
        }


        function getJobTrackers(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'modifiedOn desc';
            var predicate = null;

            var take = size || 10;
            var skip = page ? (page - 1) * size : 0;
            var nameFilter = nameFilter || '';

            if (nameFilter) {
                console.log('1');
                predicate = _jobTrackerPredicate(nameFilter);
            } else {
                console.log('2');
                predicate = _jobTrackerDefaultPredicate(nameFilter);
            }

            return EntityQuery.from('JobTrackers')
                .select('id, jobId, cardOpsId, inventoryId, printingId, printQAId, printQCId, cardEngrId, qAId, firstJobRunId, cardEngrResumeId, qCId, mailingId, dispatchId, mAudId, customerServiceId, tAT, isFlag, createdOn, modifiedOn, isCompleted')
                .where(predicate)
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                console.log(entity);
                return getByPage(); //entity; 
            }

            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _jobTrackerPredicate(nameFilter);
                } else {
                    predicate = _jobTrackerDefaultPredicate(nameFilter);
                }

                var newEntities = EntityQuery.from('JobTrackers')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                console.log(newEntities);
                return newEntities;
            }
        }

        function getJobTrackerFilteredCount(nameFilter) {
            var self = this;
            var predicate = _jobTrackerPredicate(nameFilter);

            var entities = EntityQuery.from('JobTrackers')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return entities.length;
        }

        function getJobTrackerCount() {
            var self = this;
            if (self._areItemsLoaded()) {
                return self.$q.when(self._getLocalEntityCount('JobTrackers'));
            }
            // Attendees aren't loaded; ask the server for a count.
            return EntityQuery.from('JobTrackers').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function _jobTrackerPredicate(filterValue) {
            return Predicate
                .create('job.jobName', 'contains', filterValue)
                .and('isFlag', '==', false)
                .and('isCompleted', '==', false);
        }

        function _jobTrackerDefaultPredicate() {
            return Predicate
                .create('isFlag', '==', false)
                .and('isCompleted', '==', false);
        }


        function getJobSplits(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplits')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo')
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobBatchTrackerByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobBatchTrackerByTrackerId')
                .select('id, jobId, jobTrackerId')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobBatchTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CardIssuanceByTrackerId')
                .select('id, jobTrackerId, totalQuantity, totalQuantityIssued, totalQuantityRemain, totalWaste, totalHeld')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardIssuance)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [cardIssuance Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCardIssuanceLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            //quantityIssued, quantityRemain, issuanceId, collectorId, issuedDate
            return EntityQuery.from('CardIssuanceLogByTrackerId')
                .select('id, quantityIssued, quantityRemain, issuanceId, collectorId, issuedDate')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardIssuanceLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [cardIssuanceLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        //getPrintAnalysisByTrackerId
        function getPrintAnalysisByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitPrintCEAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitPrintCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [PrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitByTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCECardDeliverys(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEDepCardDeliverys')
                .select('id, jobTrackerId, departmentId, targetDepartmentId')
                .orderBy(orderBy)
                .toType(entityNames.cardDelivery)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDelivery Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCECardDeliveryLogs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEDepCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, createdById, confirmedById, createdOn, isConfirmed')
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function getCECardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CECardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrQCCardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrQCCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed, description')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType("CardDeliveryLog")
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getQCCardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QCCardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, boxQty, createdById, createdOn, isConfirmed, description')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType("CardDeliveryLog")
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMACardDeliveryLogByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('MACardDeliveryLogs')
                .select('id, jobTrackerId, cardDeliveryId, rangeFrom, rangeTo, createdById, createdOn, isConfirmed, boxQty')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getDPCardDeliveryLogByClientId(clientId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DPCardDeliveryLogs')
                .select('id, jobTrackerId, rangeFrom, rangeTo, isConfirmed, createdById')
                .withParameters({ clientId: clientId })
                .orderBy(orderBy)
                .toType(entityNames.cardDeliveryLog)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardDeliveryLog Partials] from remote data source', entity.length, true);
                return entity;
            }
        }




        function getJobs(forceRemote, page, size, nameFilter) {
            var self = this;
            var entity;
            var orderBy = 'createdOn desc';

            var nameFilter = nameFilter || '';
            var take = size || 10;
            var skip = page ? (page - 1) * size : 0;

            return EntityQuery.from('Jobs')
                .select('id, jobName, sidSectorId, sidClientId, sidCardTypeId, jobStatusId, remark, serviceTypeId, quantity, createdOn')
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                var entity = self._setIsPartialTrue(data.results);
                return getByPage();
            }

            function getByPage() {
                var predicate = null;

                if (nameFilter) {
                    predicate = _jobPredicate(nameFilter);
                }

                var sidProducts = EntityQuery.from('Jobs')
                    .where(predicate)
                    .orderBy(orderBy)
                    .take(take).skip(skip)
                    .using(self.manager)
                    .executeLocally();

                return sidProducts;
            }

        }

        function getJobFilteredCount(nameFilter) {
            var self = this;
            var predicate = _jobPredicate(nameFilter);

            var sidProducts = EntityQuery.from('Job')
                    .where(predicate)
                    .using(this.manager)
                    .executeLocally();

            return sidProducts.length;
        }

        function getJobCount() {
            var self = this;
            // Attendees aren't loaded; ask the server for a count.
            return EntityQuery.from('Jobs').take(0).inlineCount()
                .using(this.manager).execute()
                .then(this._getInlineCount);
        }

        function _jobPredicate(filterValue) {
            return Predicate
                .create('jobName', 'contains', filterValue)
                .or('serviceType.name', 'contains', filterValue)
                .or('sidCardType.name', 'contains', filterValue)
                .or('sidClient.name', 'contains', filterValue);
        }


        function getNonPersoJobs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('NonPersoJobs')
                .select('id, jobName, description, createdById')
                .orderBy(orderBy)
                .toType('NonPersoJob')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                var entity = self._setIsPartialTrue(data.results);
                self._areItemsLoaded(true);
                //self.log('Retrieved [NonPersoJob Partials] from remote data source', entity.length, true);
                return entity;
            }

        }




        function getJobByTrackerId(val, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobByTrackerId')
                .select('id, jobName, sidSectorId, sidClientId, sidCardTypeId, remark, serviceTypeId, quantity')
                .withParameters({ jobTrackerId: val })
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [Job Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobHandler(jobSplitId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobHandlers')
                .select('id, jobSplitId, handlerId, createdOn, modifiedOn')
                .withParameters({ jobSplitId: jobSplitId })
                .orderBy(orderBy)
                .toType('JobHandler')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }
        }

        function getDispatchJobTracker(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('DispatchJobTracker')
                .select('id, jobId')
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getCEJobSplits(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEJobSplits')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CEJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPersoJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PersoJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTracker Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrintJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getMailingJobSplitByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('MailingJobSplitByJobTrackerId')
                .select('id, jobTrackerId, departmentId, sidMachineId, rangeFrom, rangeTo, isQACompleted, isQCCompleted, isCECompleted, isMACompleted')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplit)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplit Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysis(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysis')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysisByDepartment(department, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysisByDepartment')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, modifiedById')
                .withParameters({ department: department })
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitCEAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitCEAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, modifiedOn, modifiedById')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobSplitQCAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitQCAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType('JobSplitQCAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitQCAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingCESplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingCEJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn, heldReturned, wasteReturned, isJobHandleByCE, isJobHandleByQC')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                return entity;
            }
        }

        function getPendingCESplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PendingCEJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn, heldReturned, wasteReturned, isJobHandleByCE, isJobHandleByQC')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingPrintCESplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingPrintCEJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn, heldReturned, wasteReturned')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitPrintCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitPrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncomingQCSplitAnalysisByJobTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncomingQCJobSplitAnalysisByJobTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitQCAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitQCAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByJobId')
                .select('id, jobId, cardOpsId, inventoryId, printingId, cardEngrId, qAId, firstJobRunId, cardEngrResumeId, qCId, mailingId, dispatchId, customerServiceId')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByCEAnalysisId(jobCEAnalysisId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByCEAnalysisId')
                .select('id, jobId')
                .withParameters({ jobCEAnalysisId: jobCEAnalysisId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getJobTrackerByPrintCEAnalysisId(jobCEAnalysisId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobTrackerByCEAnalysisId')
                .select('id, jobId')
                .withParameters({ jobCEAnalysisId: jobCEAnalysisId })
                .orderBy(orderBy)
                .toType(entityNames.jobTracker)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getJobVariantByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobVariantByJobId')
                .select('id, jobId, sidProductId, sidVariantId')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType('JobVariant')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobVariantByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIncompleteJobs(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IncompleteJobs')
                .select('id, jobName, sidSectorId, sidClientId, remark, serviceTypeId, quantity, jobStatusId')
                .orderBy(orderBy)
                .toType(entityNames.job)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [IncompleteJob Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getQABySplitId(splitId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QABySplitId')
                .select('id, jobTrackerId, jobSplitId')
                .withParameters({ splitId: splitId })
                .orderBy(orderBy)
                .toType('Sid05QA')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobTrackerByJobId Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getQAWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('QAWasteRequests')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, createdById')
                .orderBy(orderBy)
                .toType('JobSplitCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPendingWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PendingWasteRequests')
                .select('id, jobSplitId')
                .orderBy(orderBy)
                .toType('JobBadCardApproval')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobBadCardApproval Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getIssuedWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('IssuedWasteRequests')
                .select('id, jobSplitId')
                .orderBy(orderBy)
                .toType('JobBadCardApproval')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobBadCardApproval Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        //Print Section
        function geJobSplitAnalysisByTrackerId(jobTrackerId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('JobSplitPrintAnalysisByTrackerId')
                .select('id, jobSplitId, quantityGood, quantityHeld, quantityBad, createdById, createdOn, modifiedById, modifiedOn')
                .withParameters({ jobTrackerId: jobTrackerId })
                .orderBy(orderBy)
                .toType(entityNames.jobSplitCEAnalysis)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [jobSplitCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getPrintQAWasteRequests(forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('PrintQAWasteRequests')
                .select('id, jobTrackerId, jobSplitId, quantityGood, quantityHeld, quantityBad, createdOn, createdById')
                .orderBy(orderBy)
                .toType('JobSplitPrintCEAnalysis')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [JobSplitPrintCEAnalysis Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        //Unit Activities
        function getCardOpsByJobId(jobId, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('CardOpsByJobId')
                .select('id, timeIn, timeOut')
                .withParameters({ jobId: jobId })
                .orderBy(orderBy)
                .toType('Sid01CardOps')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardOps Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



        function _jobNamePredicate(filterValue) {
            console.log(filterValue);
            return Predicate
                .create('jobName', 'contains', filterValue)
                .or('jobName', 'contains', filterValue);
        }

        function _fullNamePredicate(filterValue) {
            return Predicate
                .create('jobId', 'contains', filterValue)
                .or('cardOpsId', 'contains', filterValue);
        }


        function getUnitFlaggedJobs(unitName, forceRemote) {
            var self = this;
            var entity;
            var orderBy;

            return EntityQuery.from('UnitFlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .withParameters({ unitName: unitName })
                .orderBy(orderBy)
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self.log('Retrieved [CardOps Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('FlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResolvedFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ResolvedFlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }



    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.rm';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', relationshipmanager]);

    function relationshipmanager($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        

        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getById = getById;
         
            this.getNonPersojobs = getNonPersojobs;
            this.getRMUsers = getRMUsers;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            return this._getById(entityName, id, forceRemote);
        }

        function getNonPersojobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //DispatchIncomingJobs
            return EntityQuery.from('NonPersoJobs')
                .select('id, jobName, sidProductId, serviceTypeId, description, isTreated, isDeleted, createdById, modifiedById, createdOn, modifiedOn')
                .toType('NonPersoJob')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self.log('Retrieved [NonPersoJob Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRMUsers(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //DispatchIncomingJobs
            return EntityQuery.from('RMUsers')
                .select('id, lastName, firstName, email')
                .toType('ApplicationUser')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self.log('Retrieved [RM Users Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.sadminaccount';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', AdminAccountRepositoryResource]);

    function AdminAccountRepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;
        
        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;

            // Exposed data access functions
            this.getById = getById;
            this.getAccountPatials = getAccountPatials;
            this.getUserRoles = getUserRoles;


        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getAccountPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getUserRoles(userId, forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('UserRoles')
                .select('id, name')
                .withParameters({ userId: userId })
                .toType('IdentityRole')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getAccountRolePatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            return EntityQuery.from('Roles')
                .select('userId, roleId')
                .toType('IdentityRole')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                self._areItemsLoaded(true);
                //self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getAdminPatials(forceRemote) {
            var self = this;
            var predicate = Predicate.create('isAdmin', '==', true);
            var entity = [];
            var orderBy;

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy, predicate);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Admins')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                    entity[i].isAdmin = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Admin Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }


        function getBasicInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy; //sortOrder;
            var userId = $routeParams.id;

            var predicate = Predicate.create('id', '==', userId);

            //if (!forceRemote) {
            //    entity = self._getAllLocal(entityName, orderBy);
            //    return self.$q.when(entity);
            //}

            return EntityQuery.from('Users')
                .select('id, firstName, lastName, email, userName, phoneNumber')
                .where(predicate)
                .toType(entityName)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [Baisc Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getRoleInfoPatials(forceRemote) {
            var self = this;
            var entity = [];
            var userId = $routeParams.id;
            
            var predicate = Predicate.create('userId', '==', userId);
          
            return EntityQuery.from('AppUserAccountTypes')
                .select('id, userId, accountTypeId, clientId')
                .where(predicate)
                .toType('ApplicationUserAccountType')
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                for (var i = entity.length; i--;) {
                    entity[i].isPartial = true;
                }

                self._areItemsLoaded(true);
                //self.log('Retrieved [UserAccountTypes Info Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();
(function () {
    'use strict';
    var serviceId = 'repository.supervisor';

    angular.module('app').factory(serviceId,
        ['$routeParams', 'common', 'authService', 'model', 'repository.abstract', RepositoryResource]);

    function RepositoryResource($routeParams, common, authService, model, AbstractRepository) {
        var entityName = model.entityNames.person;
        var entityNames = model.entityNames;
        var EntityQuery = breeze.EntityQuery;
        var filterValue = authService.authentication.userName;
        var Predicate = breeze.Predicate;
        var $q = common.$q;


        function Ctor(mgr) {
            this.serviceId = serviceId;
            this.entityName = entityName;
            this.manager = mgr;
            // Exposed data access functions
            this.getFlaggedJobs = getFlaggedJobs;
            this.getResolvedFlaggedJobs = getResolvedFlaggedJobs;
        }

        AbstractRepository.extend(Ctor);

        return Ctor;

        function getById(id, forceRemote) {
            //var forceRemote;
            return this._getById(entityName, id, forceRemote);
        }

        function getFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('FlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

        function getResolvedFlaggedJobs(forceRemote) {
            var self = this;
            var entity = [];
            var orderBy;

            return EntityQuery.from('ResolvedFlaggedJobs')
                .select('id, jobTrackerId, flagTypeId, description, recommendation')
                .toType(entityNames.jobFlag)
                .using(self.manager).execute()
                .then(querySucceeded, self._queryFailed);

            function querySucceeded(data) {
                entity = data.results;
                //self._areItemsLoaded(true);
                self.log('Retrieved [Account Partials] from remote data source', entity.length, true);
                return entity;
            }
        }

    }
})();